# -*- coding: utf-8 -*-
"""AI Reasearch Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_gZ_WGurgESj5FSRZ3pR86njexvKq6iG
"""

# Install necessary libraries (Run only once)
!pip install -q tavily-python google-generativeai reportlab

# Imports
import google.generativeai as genai
from tavily import TavilyClient
import os
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet

# üîê Set up your API keys here
GEMINI_API_KEY = "AIzaSyAV6HUVn4IgDMXgB86oOGsBWOjf-Y5J-kk"
TAVILY_API_KEY = "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"

# Setup Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash-latest")

# Setup Tavily
client = TavilyClient(api_key=TAVILY_API_KEY)

# üß† Agent Class
class WebResearchAgent:
    def __init__(self, topic):
        self.topic = topic
        self.questions = []
        self.research_data = {}

    def generate_research_questions(self):
        prompt = f"Generate 5 to 6 well-structured research questions about the topic: '{self.topic}'"
        response = model.generate_content(prompt)
        self.questions = [q.strip("\n-‚Ä¢ ") for q in response.text.strip().split("\n") if q.strip()]
        return self.questions

    def search_web(self):
        for question in self.questions:
            results = client.search(query=question, search_depth="advanced", max_results=3)
            self.research_data[question] = [
            {"title": r.get("title", ""), "content": r.get("content", "")} for r in results.get("results", [])
            ]

    def compile_report(self):
        report = f"# Research Report on {self.topic}\n\n"
        report += "## Introduction\nThis report is generated by a ReAct agent that uses Gemini AI and Tavily Web Search to research the topic.\n\n"
        for i, q in enumerate(self.questions, 1):
            report += f"### {i}. {q}\n"
            entries = self.research_data.get(q, [])
            for entry in entries:
                report += f"- **{entry['title']}**: {entry['content']}\n"
            report += "\n"
        report += "## Conclusion\nThis concludes the structured findings based on current web research."
        return report

    def save_report_as_pdf(self, filename="research_report.pdf"):
        styles = getSampleStyleSheet()
        story = []
        story.append(Paragraph(f"Research Report on {self.topic}", styles['Title']))
        story.append(Spacer(1, 12))
        story.append(Paragraph("Introduction", styles['Heading2']))
        story.append(Paragraph("This report is generated by a ReAct agent that uses Gemini AI and Tavily Web Search to research the topic.", styles['BodyText']))

        for i, q in enumerate(self.questions, 1):
            story.append(Spacer(1, 12))
            story.append(Paragraph(f"{i}. {q}", styles['Heading3']))
            for entry in self.research_data.get(q, []):
                story.append(Paragraph(f"- <b>{entry['title']}</b>: {entry['content']}", styles['BodyText']))

        story.append(Spacer(1, 12))
        story.append(Paragraph("Conclusion", styles['Heading2']))
        story.append(Paragraph("This concludes the structured findings based on current web research.", styles['BodyText']))

        doc = SimpleDocTemplate(filename, pagesize=letter)
        doc.build(story)
        print(f"‚úÖ PDF saved as: {filename}")

# üîç Example Execution
agent = WebResearchAgent("Impact of Artificial Intelligence in Education")
agent.generate_research_questions()
agent.search_web()
agent.save_report_as_pdf("AI_Education_Report.pdf")